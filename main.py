import os
import re

import torch
import runpod
from dotenv import load_dotenv
import boto3

from services.cluster_func import get_clusters, update_record


def handler(event):
    """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç id –∑–∞–ø–∏—Å–∏ –≤ –ë–î –∏ –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ s3
        –ë–µ—Ä–µ—Ç –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ s3 —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ø–∞–ø–∫—É temp.
        –ë–µ—Ä–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤—ã–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç—Ç–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ Postgres
    """

    torch_variable = str(torch.cuda.is_available())
    if torch.cuda.is_available():
        print("‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPU)")
    else:
        print("‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU)")

    load_dotenv()

    # 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ s3 –≤ –ø–∞–ø–∫—É temp
    file_key = event['input']['file_key']
    item_id = event['input']['item_id']

    #file_key = '—Ä–∞–∑–≥–æ–≤–æ—Ä8—Ç—Ä–∞–Ω—Å.txt'
    #item_id = 27

    print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {file_key}")
    print(f"ID —ç–ª–µ–º–µ–Ω—Ç–∞: {item_id}")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ s3
    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
    bucket_name = "whisper-audiotest"

    s3 = boto3.client(
        's3',
        endpoint_url="http://storage.yandexcloud.net",
        aws_access_key_id=AWS_ACCESS_KEY_ID,
        aws_secret_access_key=AWS_SECRET_ACCESS_KEY
    )

    file_obj = s3.get_object(Bucket=bucket_name, Key=file_key)
    temp_dir = os.path.join(os.getcwd(), 'temp')
    os.makedirs(temp_dir, exist_ok=True)
    temp_file_path = os.path.join(temp_dir, file_key)

    with open(temp_file_path, 'wb') as temp_file:
        temp_file.write(file_obj['Body'].read())
    print(f'üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {temp_file_path}')

    # === –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ===
    with open(temp_file_path, 'r', encoding='utf-8') as file:
        file_content = file.read()
    print(file_content)

    # === –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä
    result = get_clusters(file_content)

    # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
    id_to_label = {
        0: 'DOC', # —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞, Purpose.data_type, –º–æ–¥–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
        1: 'MDT', # –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏, –º–æ–¥–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
        2: 'NAME', # –∏–º—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –∫–æ–º–ø–∞–Ω–∏–∏, Opponent.name –º–æ–¥–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
        3: 'O',
        4: 'ORG',  # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, —Å–∫–ª–µ–∏–≤–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        5: 'POS',  # –î–æ–ª–∂–Ω–æ—Å—Ç—å
        6: 'TEL',  # —Ç–µ–ª–µ—Ñ–æ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
        7: 'VOL',  # –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö, Purpose.amount –º–æ–¥–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç —á–∏—Å–ª–æ
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ —Å None
    full_result = {
        label: result.get(label) if label in result else None
        for label in id_to_label.values()
    }
    print(full_result)
    print("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    # 1. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ company_name
    print("1. ORG: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ company_name ")
    company_name = None
    org_value = full_result.get('ORG', None)
    if org_value:
        company_name = ' '.join(org_value)  # –°–∫–ª–µ–∏–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    print(f"company_name: {org_value}")

    # 2. –¢–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏ company_phone
    print("2. TEL: –¢–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏ company_phone")
    tel_value = full_result.get('TEL', None)
    if tel_value:
        company_phone = tel_value[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞
    else:
        company_phone = None
    print(f"company_phone: {company_phone}")


    # 3. –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ data_type
    print("3. DOC: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ data_type")
    doc_value = full_result.get('DOC', None)
    if doc_value:
        doc_type = ' '.join(doc_value)  # –°–∫–ª–µ–∏–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    else:
        doc_type = "–¢–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    print(f"data_type: {doc_type}")

    # 4. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –æ–±—ä–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ data_value, description, word
    print("4. VOL: –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –æ–±—ä–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    vol_value = full_result.get('VOL', None)
    if vol_value:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        numbers = re.findall(r'\d+', vol_value[0])
        data_value = int(numbers[0]) if numbers else 0  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        description = ", ".join(vol_value) if vol_value else "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
        print(f"4.1 description: –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ VOL - {description}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ —á–∏—Å–ª–∞

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ (—Å–æ—Å—Ç–æ—è—â–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤)
        words = re.findall(r'\b[–∞-—è–ê-–Øa-zA-Z]+\b', description)
        word = ", ".join(words) if words else "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
        print(f"4.2 word: —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ –∏–∑ VOL - {word}")
        print(f"4.3 amount: –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ VOL - {data_value}")

    else:
        data_value = 0
        word = '–¢–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
        description = '–ó–∞–ø—Ä–æ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'

    # 5. –î–æ–ª–∂–Ω–æ—Å—Ç—å position_value
    print("5. POS: –î–æ–ª–∂–Ω–æ—Å—Ç—å position_value")
    position_val = full_result.get('POS', None)
    if position_val:
        position_value = position_val[0]
    else:
        position_value = None
    print(f"position_value - {position_value}")

    # 7 –°–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞
    print("7. MDT: –°–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞")
    place_val = full_result.get('MDT', None)
    if place_val:
        place_value = place_val[0]
    else:
        place_value = None
    print(f"–°–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞ - {place_value}")


    # 8 –ò–º—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è
    print("7. NAME: –ò–º—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è")
    person_name_val = full_result.get('NAME', None)
    if person_name_val:
        person_name = ", ".join(person_name_val) if person_name_val else "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
    else:
        person_name = None
    print(f"–ò–º—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è - {person_name}")

    print("----------------------------------------------")
    print("–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î:")
    print(f"ID –æ–±—ä–µ–∫—Ç–∞: {item_id}")
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {company_name}")
    print(f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {position_value}")
    print(f"–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–º–∞: {description}")
    print(f"–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}")
    print(f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å/–¥–∞—Ç–∞: {data_value}")
    print(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏—Ü–∞: {person_name}")
    print(f"–ú–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è: {place_value}")
    print(f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏: {company_phone}")


    # –ø—É—à–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    update_record(item_id, company_name, position_value, description, doc_type, data_value, person_name, place_value,
                  company_phone)

    # === –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ===
    os.remove(temp_file_path)
    print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")

if __name__ == "__main__":
    runpod.serverless.start({'handler': handler})
    #handler(None)